// generated by jsonenums -type=ArticleStatusType; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

var (
	_ArticleStatusTypeNameToValue = map[string]ArticleStatusType{
		"ArticleAuditing":  ArticleAuditing,
		"ArticlePublished": ArticlePublished,
	}

	_ArticleStatusTypeValueToName = map[ArticleStatusType]string{
		ArticleAuditing:  "ArticleAuditing",
		ArticlePublished: "ArticlePublished",
	}
)

func init() {
	var v ArticleStatusType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ArticleStatusTypeNameToValue = map[string]ArticleStatusType{
			interface{}(ArticleAuditing).(fmt.Stringer).String():  ArticleAuditing,
			interface{}(ArticlePublished).(fmt.Stringer).String(): ArticlePublished,
		}
	}
}

// MarshalJSON is generated so ArticleStatusType satisfies json.Marshaler.
func (r ArticleStatusType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ArticleStatusTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ArticleStatusType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ArticleStatusType satisfies json.Unmarshaler.
func (r *ArticleStatusType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ArticleStatusType should be a string, got %s", data)
	}
	v, ok := _ArticleStatusTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ArticleStatusType %q", s)
	}
	*r = v
	return nil
}
